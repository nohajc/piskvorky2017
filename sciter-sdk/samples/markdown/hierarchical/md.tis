
namespace markdown {

  const H5 = "===== "; 
  const H4 = "==== ";
  const H3 = "=== ";
  const H2 = "== ";
  const H1 = "= ";
  const PRE = "---";
  const PRE2 = "*---??";
  const UL = "* ";
  const OL = "# ";
  const DL = ": ";
  const TH = "[*";
  const TD = "[ ";

  const CRLF = "\r\n";

  function parse(s) 
  {
    var ins = Stream.openString(s);
    function input() {
       var ln = ins.readln(); 
       return ln === undefined ? ln : (ln + CRLF);
    };
    input.lineType = null; // defining local prop on the function

    var r = doParse(input);
    ins.close();
    return r;
  } 

  function colorize(plaintext) 
  {
    var elText = plaintext.first;
    var elNext = elText;

    const applyMark = Selection.applyMark;
    const clearMark = Selection.clearMark;

    //function max(a,b) { return a > b ? a: b; }
    //stdout.println("colorizing"); 

    function markoffsets(li) {
      var node = elText.firstNode; 
      var text = node.text; 
      var ends = text.indexOf(li) ;
      ends = ends >= 0 ? ends + li.length : text.search(/\S/);
      var from = [bookmark:node, 0, false];
      var to   = [bookmark:node, ends, false];
      applyMark(from,to, "offset");
    }

    function classify(cls) {
      elText.attributes["region"] = cls;
      switch(cls) {
        case #ol: markoffsets(OL); break;
        case #ul: markoffsets(UL); break;
        case #dt: markoffsets(DL); break;
        case #dd: markoffsets(DL); break;
        case #h1: markoffsets(H1); break;
        case #h2: markoffsets(H2); break;
        case #h3: markoffsets(H3); break;
        case #h4: markoffsets(H4); break;
        case #h5: markoffsets(H5); break;
      }
    }    

    function input() {
       if( !elNext ) return undefined;
       elText = elNext;
       classify(undefined);
       clearMark(elText);
       var ln = elText.text + CRLF;
       elNext = elNext.next;
       return ln;
    };

    input.lineType = property(cls) {
      get return null; // write only prop
      set classify(cls);
    }

    var r = doParse(input);
    return r;
  } 

  function doParse(input) 
  {
    var out = "";

    const ONLY_SPACES_RE = /^\s+$/;

    // The parser is made as a chain of finite-state machines (generators). 
    // This allows to define and produce hierarchical markup. 

    // Chain diagram: 
    // processBlocks << processList(2) << processList(1) << processList(0) << processHeaders << input;
    
    function startsWith(that, str) { return that.indexOf(str) == 0; }

    function processHeaders() 
    {
      var bln = null;
      for(var ln = input(); ln !== undefined; ln = bln || input()) 
      {
        bln = null;
        var head; var tail; var hn; var re; 

             if( startsWith(ln,H5) ) {re = "      "; head = "<h5>"; tail = "</h5>"; hn = #h5; }
        else if( startsWith(ln,H4) ) {re = "     ";  head = "<h4>"; tail = "</h4>"; hn = #h4; }
        else if( startsWith(ln,H3) ) {re = "    ";   head = "<h3>"; tail = "</h3>"; hn = #h3; }
        else if( startsWith(ln,H2) ) {re = "   ";    head = "<h2>"; tail = "</h2>"; hn = #h2; }
        else if( startsWith(ln,H1) ) {re = "  ";     head = "<h1>"; tail = "</h1>"; hn = #h1; }
        else {
            yield ln; 
            continue;
        } 
        input.lineType = hn;
        yield head + ln.substr(re.length); 
        while(true){ 
          ln = input();
          if( !startsWith(ln,re) ) { if(ln) bln = ln; yield tail; break; }
          input.lineType = hn;
          yield ln.substr(re.length); 
        }
      }
    }

    function processList(n) 
    {
      const inp = n < 3 ? processList(n+1) : processHeaders();
      for(var ln in inp) 
      {
        for:listtype (var c = 0; c < 2; ++c ) 
        {
          if(startsWith(ln,UL))
          {
            yield "<ul><li>" + ln.substr(2); input.lineType = #ul;            
            for(ln in inp) { 
              input.lineType = #ul; 
              if( startsWith(ln,"  ") ) yield ln.substr(2);  
              else if( startsWith(ln,UL) ) yield "</li><li>" + ln.substr(2);  
              else if( startsWith(ln,OL) ) { yield "</li></ul>"; continue listtype; }
              else { yield "</li></ul>"; yield ln; break; }
            } 
          } 
          else if(startsWith(ln,OL)) 
          {
            yield "<ol><li>" + ln.substr(2); input.lineType = #ol;
            for(ln in inp) { 
              input.lineType = #ol;
              if( startsWith(ln,"  ") ) yield ln.substr(2);  
              else if( startsWith(ln,OL) ) yield "</li><li>" + ln.substr(2);  
              else if( startsWith(ln,UL) ) { yield "</li></ol>"; continue listtype; }
              else { yield "</li></ol>"; yield ln; break; }
            } 
          }
          else if(startsWith(ln,DL)) 
          {
            yield "<dl><dt>" + ln.substr(2) + "</dt><dd>"; 
            input.lineType = #dt;
            for(ln in inp) 
            { 
                   if( startsWith(ln,"  ") ) { input.lineType = #dd; yield ln.substr(2); }
              else if( startsWith(ln,DL) ) { input.lineType = #dt; yield "</dd>\r\n<dt>" + ln.substr(2) + "</dt><dd>"; }
              else { yield "</dd></dl>"; continue listtype; }
            }
            yield "</dd></dl>";
          }
          else  
            yield ln;  
          break;
        }
      }
    };

    function spans(r) 
    {
      // bold, italics, and code formatting
      r = r.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");
      r = r.replace(/\*(.*?)\*/g, "<em>$1</em>");
      r = r.replace(/`(.*?)`/g,  function(s,r) { return "<code>"+ r.htmlEscape() + "</code>"});
      // links
      //r = r.replace(/\[\[(http:[^\]|]*?)\]\]/g, "<a href='$1'>$1</a>");
      //r = r.replace(/\[\[(http:[^|]*?)\|(.*?)\]\]/g, "<a href='$1'>$2</a>");
      r = r.replace(/\[\[([^\]|]*?)\]\]/g, "<a href='$1'>$1</a>");
      r = r.replace(/\[\[([^|]*?)\|(.*?)\]\]/g, "<a href='$1'>$2</a>");      
      // br is \\
      r = r.replace(/\\\\/g, "<br/>");
      return r;
    }

    function tablefy(r) {
      r = r.replace(/\[\*(.+?)\*?\]/g,"<th>$1</th>").replace(/\[ (.+?) \]/g, "<td>$1</td>");
      return spans( "<tr>" + r + "</tr>");  
    }
    
    function processBlocks() 
    {
      const gen = processList(0);

      for(var nln in gen) 
      {
        var sln; // pushed back item
        for:pushback( var ln = nln; ln; ln = sln, sln = null ) 
        {
          //if(sln) stdout.println("got pushback",ln); 
          //sln = null;
          if(startsWith(ln,PRE)) 
          {
            var s = "<pre>";
            ln = ln.substr(PRE.length); 
            input.lineType = #pre;
            if( ln like PRE2 ) { 
              s += ln.substring(0,-PRE2.length).htmlEscape(); 
              //stdout.println("got PRE2",s); 
            } 
            else {
              if( !ONLY_SPACES_RE.test(ln) ) s += ln.htmlEscape(); 
              for(var ln in gen) { 
                input.lineType = #pre;
                if( ln like PRE2 ) { s += ln.substring(0,-PRE2.length).htmlEscape(); break; } 
                else s += ln.htmlEscape();
              } 
            }
            s += "</pre>";
            yield s;
          } 
          else if( ONLY_SPACES_RE.test(ln) ) 
          {
            var p = "";
            for(var ln in gen) { 
              if(startsWith(ln,PRE) || startsWith(ln,TD) || startsWith(ln,TH)) 
                                                 { if(p) yield "<p>" + spans(p) + "</p>"; sln = ln; continue pushback; }
              else if( ONLY_SPACES_RE.test(ln) ) { if(p) yield "<p>" + spans(p) + "</p>"; p = ""; } 
              else if( ln[0] == '<')             { if(p) yield "<p>" + spans(p) + "</p>" + CRLF; yield spans(ln); p = ""; break; }
              else p += ln;
            }
            if(p) yield "<p>" + spans(p) + "</p>";
          }  
          else if(startsWith(ln,TD) || startsWith(ln,TH))  {
            var t = tablefy(ln);
            for(var ln in gen) { 
              if(!startsWith(ln,TD) && !startsWith(ln,TH)) { sln = ln; break; }
              else t += tablefy(ln);
            }
            yield "<table border>" + t + "</table>"; 
            if(sln) continue pushback;
          }      
          else 
            yield spans(ln);
        }
          
      }
    }

    for( var v in processBlocks() )
      out += v;

    return out.replace(/(\s*\r\n\s*)(<\/[a-z0-6]+>)/g,"$2\r\n");

  }
}