include "virtual-tree.tis";

class FolderTree : VirtualTree
{
  function attached() {
    //this.post(this.show);
    this.filters = (this.attributes["filter"] || "*").split(";");
  }
 
  // call cb(caption,path,isFolder) for each root item
  function eachRoot(cb)
  {
    var drives = [];  

    function w(name, flags, caption)
    {
      if(flags & (System.IS_HIDDEN | System.IS_SYSTEM)) return true; // skip it   
      if((flags & System.IS_DIR) != 0)
        drives.push({name:name,caption:caption});
      return true;
    }
    System.scanFiles("/*.*", w);
    
    drives.sort(:a,b: a.name.lexicalCompare(b.name));

    if( System.PLATFORM == #Windows ) // on Windows FS is a forest
      for(var n in drives)    
        cb(n.caption + " ("+ n.name +")",n.name, true);
    else // on Posix FS is a tree
      for(var n in drives)    
        cb(n.caption,"/" + n.name, true);
  }
  
  // call cb(caption,path,isFolder) for each child item of the path"
  function eachChild(path,cb)
  {
    var folders = [];
    var files = [];
    var filters = this.filters;

    function accept(name) {
      for(var filter in filters)
        if(name like filter) return true;
      return false;
    }
  
    function w(name, flags)
    {
      //stdout.println("scan fn",name);
      if(name == "." || name == "..") return true; // skip it   
      if(flags & (System.IS_HIDDEN | System.IS_SYSTEM)) return true; // skip it   
      if((flags & System.IS_DIR) != 0)
        folders.push(name);
      else {
        if(!accept(name)) return true; // skip it
        files.push(name);
      }
      return true;
    }
    System.scanFiles(path + "/*.*", w);
    
    folders.sort(:a,b: a.lexicalCompare(b));
    files.sort(:a,b: a.lexicalCompare(b));
    for(var n in folders)    
      cb(n,path + "/" + n, true);
    for(var n in files)    
      cb(n,path + "/" + n, false);
    
  }

  function show(path = "",filters = null) 
  {
     this.filters = filters || this.filters;
     super.show(path);
  }

}

